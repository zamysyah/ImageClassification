# -*- coding: utf-8 -*-
"""ImageClassification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LkGVfzZaDQEZvbTW6CKQMCUnpY5COaCE
"""

# Image Classification menggunakan CNN (Fashion MNIST)
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.datasets import fashion_mnist
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns

# 1. Load dataset
(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()

# 2. Normalisasi data
x_train = x_train / 255.0
x_test = x_test / 255.0

# 3. Tambahkan channel dimension (karena grayscale)
x_train = x_train.reshape(-1, 28, 28, 1)
x_test = x_test.reshape(-1, 28, 28, 1)

# 4. Mapping label
class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

# 5. Model CNN
model = models.Sequential([
    layers.Conv2D(64, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(128, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Dropout(0.25),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(10, activation='softmax')
])

# 6. Kompilasi
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# 7. Training
history = model.fit(x_train, y_train, epochs=10, validation_split=0.1, batch_size=64)

# 8. Evaluasi
test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)
print("\nAkurasi pada data test:", round(test_acc * 100, 2), "%")

# 9. Visualisasi akurasi dan loss
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Akurasi Training')
plt.plot(history.history['val_accuracy'], label='Akurasi Validasi')
plt.legend()
plt.title("Akurasi Model")

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Loss Training')
plt.plot(history.history['val_loss'], label='Loss Validasi')
plt.legend()
plt.title("Loss Model")
plt.show()

# 10. Confusion Matrix
y_pred = np.argmax(model.predict(x_test), axis=-1)
cm = confusion_matrix(y_test, y_pred)

plt.figure(figsize=(10, 8))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=class_names, yticklabels=class_names)
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

# 11. Classification Report
print("\nClassification Report:\n")
print(classification_report(y_test, y_pred, target_names=class_names))

# Visualisasi Prediksi pada 20 Gambar
plt.figure(figsize=(14, 8))
for i in range(20):
    plt.subplot(4, 5, i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(x_test[i].reshape(28,28), cmap=plt.cm.binary)

    pred_label = class_names[y_pred[i]]
    true_label = class_names[y_test[i]]
    color = 'green' if pred_label == true_label else 'red'
    plt.xlabel(f"Pred: {pred_label}\nTrue: {true_label}", color=color)

plt.tight_layout()
plt.suptitle("Contoh Prediksi (Hijau = Benar, Merah = Salah)", fontsize=16, y=1.05)
plt.show()

# Perbaiki visual akurasi dan loss
fig, axs = plt.subplots(1, 2, figsize=(14, 5))

# Akurasi
axs[0].plot(history.history['accuracy'], label='Training', marker='o')
axs[0].plot(history.history['val_accuracy'], label='Validation', marker='o')
axs[0].set_title('Akurasi Model')
axs[0].set_xlabel('Epoch')
axs[0].set_ylabel('Akurasi')
axs[0].legend()
axs[0].grid(True)

# Loss
axs[1].plot(history.history['loss'], label='Training', marker='o')
axs[1].plot(history.history['val_loss'], label='Validation', marker='o')
axs[1].set_title('Loss Model')
axs[1].set_xlabel('Epoch')
axs[1].set_ylabel('Loss')
axs[1].legend()
axs[1].grid(True)

plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 8))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=class_names, yticklabels=class_names)
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.title("Confusion Matrix - CNN Fashion MNIST", fontsize=14)
plt.show()